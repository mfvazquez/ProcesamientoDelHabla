close all
clear
clc

addpath('lib');
load(fullfile('data','data.mat'));

%% EJERCICIO 1

% [x,stateSeq] = genhmm(hmm4.means,hmm4.vars,hmm4.trans);
% figure(1)
% plotseq(x,stateSeq)
% figure(2)
% plotseq2(x,stateSeq)


%% EJERCICIO 2

means = hmm4.means;
vars = hmm4.vars;
trans = [0   1   0   0   0  ;...
         0   0.5 0.5 0   0  ;...
         0   0   0.5 0.5 0  ;...
         0   0   0   0.5 0.5;...
         0   0   0   0   1  ];
trans(trans<1e-100) = 1e-100;

[x,stateSeq] = genhmm(means,vars,trans);

media_inicial = calcular_media(x');
means(2:end-1) = {media_inicial};

varianza_inicial = calcular_varianza(x',media_inicial);
vars(2:end-1) = {varianza_inicial};


TOLERANCIA = 1e-6;
likelihood = [];
while true

    %% OBTENGO GAMMA

    [alpha, beta, Gamma, xi] = ParametrosMarkov(means, vars, trans, x);
    Gamma = exp(Gamma)';
    t = x';
    
    %% RECALCULO PARAMETROS

    for k = 1:length(parametros)

        suma_gamma = sum(Gamma(:,k));

        % MEDIA
        parametros(k).media = sum(Gamma(:,k).*x')'/suma_gamma;

        % VARIANZA
        numerador = 0;
        for i = 1:size(train_set,2)

            aux = (train_set(:,i) - parametros(k).media);
            aux = aux * aux';
            numerador = numerador + Gamma(i,k) * aux;

        end

        parametros(k).varianza = numerador/suma_gamma;

        % PI
        parametros(k).pi = suma_gamma/sum(sum(Gamma));

    end

    %% LIKELIHOOD

    LL = 0;
    for i = 1:size(train_set,2)
        aux = 0;
        for k = 1:length(parametros)    
            aux = aux + mvnpdf(train_set(:,i),parametros(k).media,parametros(k).varianza) * parametros(k).pi;
        end
        LL = LL + log(aux);
    end

    likelihood = [likelihood LL];
    
    if length(likelihood) > 1 && abs(likelihood(end) - likelihood(end-1)) < TOLERANCIA
        break
    end

end

figure
plot(likelihood)
title('likelihood')

%% CLASIFICO

for x = 1:length(bootstrap_set)
    clasificacion_train{x} = [];
    clasificacion_test{x} = [];
end

for i = 1:size(train_set, 2)
    Gamma = calcular_gamma(parametros, train_set(:,i));
    
    clase = find(max(Gamma) == Gamma);
    clasificacion_train{clase}(:,end+1) = train_set(:,i);
end

errores = 0;

for i = 1:size(test_set,2)
    Gamma = calcular_gamma(parametros, test_set(:,i));
    
    clase = find(max(Gamma) == Gamma);
    clasificacion_test{clase}(:,end+1) = test_set(:,i);
    if clase ~= resultados_test(i)
        errores = errores + 1;
    end
end


leyenda = {};
figure
hold on;

for x = 1:length(bootstrap_set)
   
    plot(original{x}(1,:),original{x}(2,:), [colores(x) '.'], 'linewidth',3)
    leyenda = [leyenda ['original ' num2str(x)]];
    
    plot(clasificacion_train{x}(1,:),clasificacion_train{x}(2,:), [colores(x) 'o'])
    leyenda = [leyenda ['train set ' num2str(x)]];
    
    plot(clasificacion_test{x}(1,:),clasificacion_test{x}(2,:), [colores(x) '^'])
    leyenda = [leyenda ['test set ' num2str(x)]];
    
end

% Agrego las elipses  y medias
for x = 1:length(parametros)
    elipse = obtener_elipse(parametros(x).media, parametros(x).varianza);
    plot(elipse(1,:),elipse(2,:), colores(x)) 

    plot(parametros(x).media(1), parametros(x).media(2), '+k','linewidth',2);
end



legend(leyenda, 'Location','best');
title(['clasificacion final con ' num2str(errores) ' errores'])

%% ERRORES DETECTADOS

disp(['Errores = ' num2str(errores)]);

%% GRAFICO USANDO LOS GAMMA COMO CODIGO DE COLORES


figure
hold on
for i = 1:size(train_set,2)
    Gamma = calcular_gamma(parametros, train_set(:,i));
    plot(train_set(1,i), train_set(2,i),'o','color',Gamma)
end

for i = 1:size(test_set,2)
    Gamma = calcular_gamma(parametros, test_set(:,i));
    plot(test_set(1,i), test_set(2,i),'^','color',Gamma)
end
title('clasificacion usando gamma como codigo de colores')